---

  - hosts: cns


    tasks:

      - name: verify iptables rules in app nodes
        shell: iptables -S OS_FIREWALL_ALLOW
        register: iptables_rules
        failed_when: item not in iptables_rules.stdout
        with_items:
          - "-A OS_FIREWALL_ALLOW -p tcp -m state --state NEW -m tcp --dport 24007 -j ACCEPT"
          - "-A OS_FIREWALL_ALLOW -p tcp -m state --state NEW -m tcp --dport 24008 -j ACCEPT"
          - "-A OS_FIREWALL_ALLOW -p tcp -m state --state NEW -m tcp --dport 2222 -j ACCEPT"
          - "-A OS_FIREWALL_ALLOW -p tcp -m state --state NEW -m multiport --dports 49152:49664 -j ACCEPT"
        changed_when: False
        become: true

  - hosts: localhost

    tasks:

      - include_vars: /opt/lab/environment.yml

      - set_fact:
          cns_namespace: "{{ CNS_NAMESPACE | default('container-native-storage') }}"

      - name: check if CNS namespace exists
        shell: oc get projects -o jsonpath='{$.items[?(@.metadata.name=="{{cns_namespace}}")]..name}'
        register: check_namespace
        failed_when: check_namespace.stdout != cns_namespace
        changed_when: False

      - set_fact:
          cns_service_account: "system:serviceaccount:{{cns_namespace}}:default"

      - name: check privileged scc has been added to namespace default service account
        shell: oc get scc privileged -o jsonpath='{$.users[?(@=="system:serviceaccount:{{cns_namespace}}:default")]}'
        register: check_scc
        failed_when: check_scc.stdout != cns_service_account
        changed_when: False

      - name: check daemonset
        shell: oc get daemonset -o jsonpath='{$.items[?(@.metadata.name=="glusterfs")].status.desiredNumberScheduled}' -n {{cns_namespace}}
        register: check_daemonset_desired
        failed_when: check_daemonset_desired.stdout == ""
        changed_when: False

      - name: check daemonset health
        shell: oc get daemonset -o jsonpath='{$.items[?(@.metadata.name=="glusterfs")].status.numberReady}' -n {{cns_namespace}}
        register: check_daemonset_ready
        failed_when:
          - check_daemonset_ready.stdout == ""
          - check_daemonset_ready.stdout|int < check_daemonset_desired.stdout|int
        changed_when: False

      - name: check if at least 3 running glusterfs pods exist in namespace
        shell: oc get pods -n {{cns_namespace}} -o jsonpath='{$.items[?(@.status.phase=="Running")]..metadata.name}' | awk '{print gsub(/glusterfs-/,"")}'
        register: check_pods
        failed_when: check_pods.stdout|int < 3
        changed_when: False

      - name: check heketi deployment
        shell: oc get rc -n {{cns_namespace}} -o jsonpath='{$.items[?(@.spec.selector.deploymentconfig=="heketi")]..status.readyReplicas}'
        register: check_heketi_dc
        failed_when: check_heketi_dc.stdout != "1"
        changed_when: False

      - set_fact:
          heketi_admin_key: "{{ HEKETI_ADMIN_PW | default('myS3cr3tpassw0rd') }}"

      - name: check heketi admin key
        shell: oc get dc/heketi -n {{cns_namespace}} -o jsonpath='{$.spec.template.spec.containers[?(@.name=="heketi")].env[?(@.name=="HEKETI_ADMIN_KEY")].value}'
        register: check_heketi_admin_key
        failed_when: check_heketi_admin_key.stdout != heketi_admin_key
        changed_when: False

      - name: check heketi service IP
        shell: oc get service -n {{cns_namespace}} -o jsonpath='{$.items[?(@.metadata.name=="heketi")].spec.clusterIP}'
        register: check_heketi_service_ip
        failed_when: check_heketi_service_ip.stdout == ""
        changed_when: False

      - set_fact:
          heketi_service_ip: "{{check_heketi_service_ip.stdout}}"

      - name: determine heketi service port
        shell: oc get service -n {{cns_namespace}} -o jsonpath='{$.items[?(@.metadata.name=="heketi")].spec.ports[?(@.name=="heketi")].port}'
        register: check_heketi_service_port
        failed_when: check_heketi_service_port.stdout == ""
        changed_when: False

      - set_fact:
          heketi_service_port: "{{check_heketi_service_port.stdout}}"

      - name: check heketi responsiveness via service
        uri:
          url: "http://{{heketi_service_ip}}:{{heketi_service_port}}/hello"

      - set_fact:
          ocp_routing_suffix: "{{ OCP_ROUTING_SUFFIX | default('apps.unset.ocp-admin.aws.openshifttestdrive.com') }}"

      - set_fact:
          heketi_route: "heketi-{{cns_namespace}}.{{ocp_routing_suffix}}"

      - name: check heketi route
        shell: oc get route -n {{cns_namespace}} -o jsonpath='{$.items[?(@.metadata.name=="heketi")].spec.host}'
        register: check_heketi_route
        failed_when: check_heketi_route.stdout != heketi_route
        changed_when: False

      - name: check heketi responsiveness via route
        uri:
          url: "http://{{heketi_route}}/hello"
          return_content: yes
        register: heketi_hello
        failed_when: "'Hello from Heketi' not in heketi_hello.content"
        changed_when: False

      - name: check secret named cns-secret in default namespace
        shell: oc get secret/cns-secret -n default -o jsonpath='{$.items[?(@.metadata.name=="heketi")].spec.host}'
        register: check_cns_secret
        failed_when: check_cns_secret.stdout != ""
        changed_when: False

      - set_fact:
          cns_storageclass: "{{ CNS_STORAGECLASS }}"

      - name: check storageclass by name
        shell: oc get storageclass/{{cns_storageclass}} -o jsonpath='{$.metadata.name}'
        register: check_storageclass_name
        failed_when: check_storageclass_name.stdout != cns_storageclass
        changed_when: False

      - set_fact:
          heketi_resturl: "http://{{ heketi_route }}"

      - name: check storageclass resturl
        shell: oc get storageclass/{{cns_storageclass}}  -o jsonpath='{$.parameters.resturl}'
        register: check_storageclass_resturl
        failed_when: check_storageclass_resturl.stdout != heketi_resturl
        changed_when: False

      - name: check storageclass restauth
        shell: oc get storageclass/{{cns_storageclass}} -o jsonpath='{$.parameters.restauthenabled}'
        register: check_storageclass_restauth
        failed_when: check_storageclass_restauth.stdout != "true"
        changed_when: False

      - name: check storageclass restuser
        shell: oc get storageclass/{{cns_storageclass}} -o jsonpath='{$.parameters.restuser}'
        register: check_storageclass_restuser
        failed_when: check_storageclass_restuser.stdout != "admin"
        changed_when: False

      - name: check storageclass volumetype
        shell: oc get storageclass/{{cns_storageclass}} -o jsonpath='{$.parameters.volumetype}'
        register: check_storageclass_volumetype
        failed_when: check_storageclass_volumetype.stdout != "replicate:3"
        changed_when: False

      - name: check storageclass secretnamespace
        shell: oc get storageclass/{{cns_storageclass}} -o jsonpath='{$.parameters.secretNamespace}'
        register: check_storageclass_secretnamespace
        failed_when: check_storageclass_secretnamespace.stdout != "default"
        changed_when: False

      - name: check storageclass secretname
        shell: oc get storageclass/{{cns_storageclass}} -o jsonpath='{$.parameters.secretName}'
        register: check_storageclass_secretname
        failed_when: check_storageclass_secretname.stdout != "cns-secret"
        changed_when: False

      - name: check presence of heketi-cli
        shell: which heketi-cli
        changed_when: False

      - name: check heketi-cli version
        shell: heketi-cli --version
        register: check_heketi_cli_version
        failed_when: check_heketi_cli_version.stdout.split(' ')[-1] | version_compare('4.0.0', '!=')
        changed_when: False

      - name: check for a cluster returned by heketi
        shell: heketi-cli --user=admin --secret {{ heketi_admin_key }} --server {{ heketi_resturl }} cluster list
        register: check_heketi_cluster_list
        failed_when: check_heketi_cluster_list.stdout_lines|length != 2
        changed_when: False

      - set_fact:
          heketi_cluster: check_heketi_cluster_list.stdout_lines[1]

      - name: query the a cluster returned by heketi
        shell: heketi-cli --user=admin --secret {{ heketi_admin_key }} --server {{ heketi_resturl }} cluster show {{ heketi_cluster }}
        changed_when: False
...
